
Autotuning_feature.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00804000  00804000  00000220  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033e2  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d87  00000000  00000000  000036aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041b  00000000  00000000  00006431  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  0000684c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001977  00000000  00000000  000068b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000084  00000000  00000000  00008227  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000082ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 76 00 	jmp	0xec	; 0xec <__ctors_end>
   4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
   c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  54:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  58:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  5c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  60:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  64:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  68:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  6c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  70:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  74:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_29>
  78:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  7c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  80:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  84:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  88:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  8c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  90:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  94:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  98:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  9c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  a0:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  a4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  a8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  ac:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  b0:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  b4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  b8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  bc:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  c0:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  c4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  c8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  cc:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  d0:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  d4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  d8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  dc:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  e0:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  e4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  e8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>

000000ec <__ctors_end>:
  ec:	11 24       	eor	r1, r1
  ee:	1f be       	out	0x3f, r1	; 63
  f0:	cf ef       	ldi	r28, 0xFF	; 255
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	df e7       	ldi	r29, 0x7F	; 127
  f6:	de bf       	out	0x3e, r29	; 62

000000f8 <__do_clear_bss>:
  f8:	20 e4       	ldi	r18, 0x40	; 64
  fa:	a0 e0       	ldi	r26, 0x00	; 0
  fc:	b0 e4       	ldi	r27, 0x40	; 64
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	a1 30       	cpi	r26, 0x01	; 1
 104:	b2 07       	cpc	r27, r18
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	0e 94 a1 00 	call	0x142	; 0x142 <main>
 10c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <_exit>

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <CLK_Init>:
    }
}

void CLK_Init(void)
{
    _PROTECTED_WRITE (CLKCTRL.OSCHFCTRLA, CLKCTRL_FREQSEL_1M_gc);
 114:	88 ed       	ldi	r24, 0xD8	; 216
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	84 bf       	out	0x34, r24	; 52
 11a:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    _PROTECTED_WRITE (CLKCTRL.XOSC32KCTRLA, CLKCTRL_ENABLE_bm);
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	84 bf       	out	0x34, r24	; 52
 122:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    _PROTECTED_WRITE (CLKCTRL.MCLKCTRLA, (CLKCTRL_CLKSEL_OSCHF_gc) | (CLKCTRL_CLKOUT_bm)); 
 126:	20 e8       	ldi	r18, 0x80	; 128
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	84 bf       	out	0x34, r24	; 52
 12c:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 130:	08 95       	ret

00000132 <Button_Init>:
}

void Button_Init(void)
{
    PORTC.DIRCLR = BUTTON_PIN;
 132:	e0 e4       	ldi	r30, 0x40	; 64
 134:	f4 e0       	ldi	r31, 0x04	; 4
 136:	80 e8       	ldi	r24, 0x80	; 128
 138:	82 83       	std	Z+2, r24	; 0x02
    PORTC.INTFLAGS = BUTTON_PIN;
 13a:	81 87       	std	Z+9, r24	; 0x09
    PORTC.PIN7CTRL = PORT_ISC_RISING_gc | PULL_UP_ENABLE;
 13c:	8a e0       	ldi	r24, 0x0A	; 10
 13e:	87 8b       	std	Z+23, r24	; 0x17
 140:	08 95       	ret

00000142 <main>:

uint8_t volatile button_event = NOT_PRESSED;

int main(void)
{
    cli();
 142:	f8 94       	cli

    Button_Init();
 144:	0e 94 99 00 	call	0x132	; 0x132 <Button_Init>

    CLK_Init();
 148:	0e 94 8a 00 	call	0x114	; 0x114 <CLK_Init>

    sei();
 14c:	78 94       	sei
    while (1) 
    {
        if(button_event == PRESSED) 
        {
            cli();
            _PROTECTED_WRITE (CLKCTRL.OSCHFCTRLA, ((CLKCTRL_FREQSEL_1M_gc)|(CLKCTRL_AUTOTUNE_bm)));
 14e:	28 ed       	ldi	r18, 0xD8	; 216
 150:	31 e0       	ldi	r19, 0x01	; 1
            _delay_ms(DELAY_TIME);
            _PROTECTED_WRITE (CLKCTRL.OSCHFCTRLA, CLKCTRL_FREQSEL_1M_gc);
 152:	90 e0       	ldi	r25, 0x00	; 0

    sei();

    while (1) 
    {
        if(button_event == PRESSED) 
 154:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0x12>
        {
            cli();
 15c:	f8 94       	cli
            _PROTECTED_WRITE (CLKCTRL.OSCHFCTRLA, ((CLKCTRL_FREQSEL_1M_gc)|(CLKCTRL_AUTOTUNE_bm)));
 15e:	24 bf       	out	0x34, r18	; 52
 160:	30 93 68 00 	sts	0x0068, r19	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	4f e3       	ldi	r20, 0x3F	; 63
 166:	5d e0       	ldi	r21, 0x0D	; 13
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	41 50       	subi	r20, 0x01	; 1
 16c:	50 40       	sbci	r21, 0x00	; 0
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0x28>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x32>
 174:	00 00       	nop
            _delay_ms(DELAY_TIME);
            _PROTECTED_WRITE (CLKCTRL.OSCHFCTRLA, CLKCTRL_FREQSEL_1M_gc);
 176:	24 bf       	out	0x34, r18	; 52
 178:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
            button_event = NOT_PRESSED;
 17c:	90 93 00 40 	sts	0x4000, r25	; 0x804000 <__DATA_REGION_ORIGIN__>
            sei();
 180:	78 94       	sei
 182:	e8 cf       	rjmp	.-48     	; 0x154 <main+0x12>

00000184 <__vector_29>:
    PORTC.INTFLAGS = BUTTON_PIN;
    PORTC.PIN7CTRL = PORT_ISC_RISING_gc | PULL_UP_ENABLE;
}

ISR(PORTC_PORT_vect)
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	8f 93       	push	r24
    button_event = PRESSED;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
    PORTC.INTFLAGS = BUTTON_PIN;
 196:	80 e8       	ldi	r24, 0x80	; 128
 198:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
}
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
